[[hints-annotations-autodiscovery]]
= Hints annotations based autodiscover

beta[]

NOTE: Make sure you are using {agent} 8.5+.

NOTE: Hints autodiscovery only works with {agent} Standalone.

Standalone {agent} supports autodiscover based on hints from the <<kubernetes-provider,provider>>.
The hints mechanism looks for hints in Kubernetes Pod annotations that have the prefix `co.elastic.hints`.
As soon as the container starts, {agent} checks it for hints and launches the proper configuration
for the container. Hints tell {agent} how to monitor the container by using the proper integration.
This is the full list of supported hints:

[discrete]
== Required hints:

[float]
=== `co.elastic.hints/package`

The package to use for monitoring.

[float]
=== `co.elastic.hints/host`

The host to use for metrics retrieval.

[discrete]
== Optional hints available:

[float]
=== `co.elastic.hints/data_stream`

The list of data streams to enable. If not specified, the integration's default data streams are used. To find the defaults, refer to the {integrations-docs}[Elastic integrations documentation].

If data streams are specified, additional hints can be defined per data stream. For example, `co.elastic.hints/info.period: 5m` if the data stream specified is `info` for the {metricbeat-ref}/metricbeat-module-redis.html[Redis module].

[source,yaml]
----
apiVersion: v1
kind: Pod
metadata:
  name: redis
  annotations:
    co.elastic.hints/package: redis
    co.elastic.hints/data_streams: info
    co.elastic.hints/info.period: 5m
----

If data stream hints are not specified, the top level hints will be used in its configuration.

[float]
=== `co.elastic.hints/metrics_path`

The path to retrieve the metrics from.

[float]
=== `co.elastic.hints/period`

The time interval for metrics retrieval, for example, 10s.

[float]
=== `co.elastic.hints/timeout`

Metrics retrieval timeout, for example, 3s.

[float]
=== `co.elastic.hints/username`

The username to use for authentication.

[float]
=== `co.elastic.hints/password`

The password to use for authentication. It is recommended to retrieve this sensitive information from an ENV variable
and avoid placing passwords in plain text.

[float]
=== `co.elastic.hints/stream`

The stream to use for logs collection, for example, stdout/stderr.

If the specified package has no logs support, a generic container's logs input will be used as a fallback.

[float]
=== `co.elastic.hints/processors`

Define a processor to be added to the  input configuration. See <<elastic-agent-processor-configuration>> for the list of supported processors.

If processors configuration uses list data structure, object fields must be enumerated. For example, hints for the rename processor configuration below

[source,yaml]
----
processors:
  - rename:
      fields:
        - from: "a.g"
          to: "e.d"
      fail_on_error: true
----

will look like:

[source,yaml]
----
co.elastic.hints/processors.rename.fields.0.from: "a.g"
co.elastic.hints/processors.rename.fields.1.to: "e.d"
co.elastic.hints/processors.rename.fail_on_error: 'true'
----

If processors configuration uses map data structure, enumeration is not needed. For example, the equivalent to the add_fields configuration below

[source,yaml]
----
processors:
  - add_fields:
      target: project
      fields:
        name: myproject
----

is

[source,yaml]
----
co.elastic.hints/processors.1.add_fields.target: "project"
co.elastic.hints/processors.1.add_fields.fields.name: "myproject"
----

In order to provide ordering of the processor definition, numbers can be provided. If not, the hints builder will do arbitrary ordering:

[source,yaml]
----
co.elastic.hints/processors.1.dissect.tokenizer: "%{key1} %{key2}"
co.elastic.hints/processors.dissect.tokenizer: "%{key2} %{key1}"
----

In the above sample the processor definition tagged with 1 would be executed first.

IMPORTANT: Processor configuration is not supported on datastream level. So annotations like `co.elastic.hints/<datastream>.processors` will be ignored.


[discrete]
== Available packages that support hints autodiscovery

The available packages that are supported through hints can be found
https://github.com/elastic/elastic-agent/tree/main/deploy/kubernetes/elastic-agent-standalone/templates.d[here].

[discrete]
== Configure hints autodiscovery

To enable hints, you must add `hints.enabled: true` to the provider's configuration:

[source,yaml]
----
providers:
  kubernetes:
    hints.enabled: true
----

Then ensure that the proper volumes and volumeMounts are specified by uncommenting the appropriate sections in the {agent} manifest:

[source,yaml]
----
volumeMounts:
- name: external-inputs
  mountPath: /etc/elastic-agent/inputs.d
...
volumes:
- name: external-inputs
  emptyDir: {}
...
----

An init container is also required to download the hints templates.
The init container is already defined, so uncomment the respective section:

["source", "yaml", subs="attributes"]
----
initContainers:
- name: k8s-templates-downloader
  image: busybox:1.28
  command: ['sh']
  args:
    - -c
    - >-
      mkdir -p /etc/elastic-agent/inputs.d &&
      wget -O - https://github.com/elastic/elastic-agent/archive/{branch}.tar.gz | tar xz -C /etc/elastic-agent/inputs.d --strip=5 "elastic-agent-{branch}/deploy/kubernetes/elastic-agent-standalone/templates.d"
  volumeMounts:
    - name: external-inputs
      mountPath: /etc/elastic-agent/inputs.d
----

[discrete]
== Example: Hints autodiscovery

Enabling hints allows users deploying Pods on the cluster to automatically turn on Elastic
monitoring at Pod deployment time.
For example, to deploy a Redis Pod on the cluster and automatically enable Elastic monitoring, add the proper hints as annotations on the Pod manifest file:

[source,yaml]
----
...
apiVersion: v1
kind: Pod
metadata:
  name: redis
  annotations:
    co.elastic.hints/package: redis
    co.elastic.hints/data_streams: info
    co.elastic.hints/host: '${kubernetes.pod.ip}:6379'
    co.elastic.hints/info.period: 5s
  labels:
    k8s-app: redis
    app: redis
...
----

After deploying this Pod, the data will start flowing in automatically. You can find it on the index `metrics-redis.info-default`.

NOTE: All assets (dashboards, ingest pipelines, and so on) related to the Redis integration are not installed. You need to explicitly <<install-uninstall-integration-assets,install them through {kib}>>.



[discrete]
== Troubleshooting

When things do not work as expected, you may need to troubleshoot your setup. Here we provide some directions to speed up your investigation:

. Exec inside an Agent's Pod and run the `inspect` command to verify how inputs are constructed dynamically:
+
["source", "sh", subs="attributes"]
------------------------------------------------
./elastic-agent inspect --variables --variables-wait 1s -c /etc/elastic-agent/agent.yml
------------------------------------------------
+
Specifically, examine how the inputs are being populated.

. View the {agent} logs:
+
["source", "sh", subs="attributes"]
------------------------------------------------
tail -f /etc/elastic-agent/data/logs/elastic-agent-*.ndjson
------------------------------------------------
+
Verify that the hints feature is enabled in the config and look for hints-related logs like:
"Generated hints mappings are ..."
In these logs, you can find the mappings that are extracted out of the annotations and determine if the values can populate a specific input.

. View the {metricbeat} logs:
+
["source", "sh", subs="attributes"]
------------------------------------------------
tail -f /etc/elastic-agent/data/logs/default/metricbeat-*.ndjson
------------------------------------------------

. View the {filebeat} logs:
+
["source", "sh", subs="attributes"]
------------------------------------------------
tail -f /etc/elastic-agent/data/logs/default/filebeat-*.ndjson
------------------------------------------------

. View the target input template. For the Redis example:
+
["source", "sh", subs="attributes"]
------------------------------------------------
cat f /etc/elastic-agent/inputs.d/redis.yml
------------------------------------------------
